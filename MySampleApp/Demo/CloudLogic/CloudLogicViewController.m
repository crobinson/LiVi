//
//  CloudLogicViewController.m
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.6
//
#import <Foundation/Foundation.h>
#import "CloudLogicViewController.h"
#import "AWSCloudLogic.h"

@interface CloudLogicViewController () <UITextFieldDelegate>

@property UIActivityIndicatorView *activityIndicator;

@end

@implementation CloudLogicViewController

#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];

    self.activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    self.activityIndicator.hidesWhenStopped = YES;
    self.activityIndicator.frame = CGRectMake(0.0, 0.0, 40.0, 40.0);
    self.activityIndicator.center = self.view.center;
    [self.view addSubview:self.activityIndicator];
    [self.activityIndicator bringSubviewToFront:self.view];

    self.functionField.delegate = self;
}

- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    [textField resignFirstResponder];

    return YES;
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];

    CGFloat cornerRadius = 5;
    CGFloat borderWidth = 1;

    CALayer *requestTextViewLayer = self.requestTextView.layer;
    [requestTextViewLayer setCornerRadius:cornerRadius];
    [requestTextViewLayer setBorderWidth:borderWidth];
    requestTextViewLayer.borderColor = [[UIColor lightGrayColor] CGColor];

    CALayer *resultTextViewLayer = self.resultTextView.layer;
    [resultTextViewLayer setCornerRadius:cornerRadius];
    [resultTextViewLayer setBorderWidth:borderWidth];
    resultTextViewLayer.borderColor = [[UIColor lightGrayColor] CGColor];

    CALayer *resetButtonLayer = self.resetButton.layer;
    [resetButtonLayer setCornerRadius:cornerRadius];

    CALayer *invokeButtonLayer = self.invokeButton.layer;
    [invokeButtonLayer setCornerRadius:cornerRadius];
}

#pragma mark - IBActions

- (IBAction)handleReset:(id)sender {
    [self.requestTextView resignFirstResponder];

    self.requestTextView.text = @"{\n  \"key1\":\"value1\",\n  \"key2\":\"value2\",\n  \"key3\":\"value3\"\n}";
    self.resultTextView.text = @"";
}

-(IBAction)handleInvoke:(id)sender {
    [self.requestTextView resignFirstResponder];

    NSString *functionName = _functionField.text;
    if (!functionName.length) {
        self.resultTextView.text = @"Function name is empty.";
        return;
    }
    NSLog(@"Function Name: %@", functionName);

    NSError *jsonError = nil;
    NSString *jsonInput = [self makeJsonable:self.requestTextView.text];
    NSData *jsonData = [jsonInput dataUsingEncoding:NSUTF8StringEncoding];
    NSDictionary *parameters = [NSJSONSerialization JSONObjectWithData:jsonData
                                                               options:NSJSONReadingAllowFragments
                                                                 error:&jsonError];
    NSLog(@"Json Input: %@", jsonInput);
    if (jsonError) {
        self.resultTextView.text = @"JSON request is not well-formed.";
        return;
    }

    [self.activityIndicator startAnimating];
    [[AWSCloudLogic sharedInstance] invokeFunction:functionName withParameters:parameters
                               withCompletionBlock:^(id result, NSError *error) {
                                   dispatch_async(dispatch_get_main_queue(), ^{
                                       
                                       NSLog(@"CloudLogicViewController: Result: %@, Error: %@", result, error);
                                       self.resultTextView.text = [self prettyPrintJsonResult:result];
                                       
                                       [self.activityIndicator stopAnimating];

                                       if (error != nil) {
                                           if (error.userInfo != nil &&
                                               [error.userInfo objectForKey:@"Message"] != nil) {
                                               self.resultTextView.text = [NSString stringWithFormat:@"%@", [error.userInfo objectForKey:@"Message"]];
                                           }
                                           
                                           UIAlertView *alert =
                                               [[UIAlertView alloc] initWithTitle:@"Error" message:[error localizedDescription] delegate:nil cancelButtonTitle:@"DISMISS" otherButtonTitles:nil];
                                           [alert show];
                                       }
                                   });
                               }];
}

- (IBAction)tapRecognized:(UITapGestureRecognizer *)sender {
    [self.requestTextView resignFirstResponder];
    [self.functionField resignFirstResponder];
}

#pragma mark - Utility Methods

- (NSString *)prettyPrintJsonResult:(id)result {
    NSString *prettyResult;
    if (result == nil) {
        return @"";
    } else if ([result isKindOfClass:NSArray.class]) {
        NSString *entries = @"";
        for (int i = 0; i < [result count]; ++i) {
            if (i == 0) {
                entries = [result objectAtIndex:i];
            } else {
                entries = [NSString stringWithFormat:@"%@, %@", entries, [self prettyPrintJsonResult:[result objectAtIndex:i]]];
            }
        }
        prettyResult = [NSString stringWithFormat:@"[%@]", entries];
    } else if ([result isKindOfClass:NSDictionary.class]) {
        prettyResult = @"{";
        NSString *entries = @"";
        for (id key in result) {
            entries = [NSString stringWithFormat:@"\"%@, %@\":%@", entries, key,
                       [self prettyPrintJsonResult:[result objectForKey:key]]];
        }
        prettyResult = [NSString stringWithFormat:@"{%@}", entries];
    } else if ([result isKindOfClass:NSNumber.class]) {
        prettyResult = [NSString stringWithFormat:@"%@", [(NSNumber *)result stringValue]];
    } else if ([result isKindOfClass:NSString.class]) {
        prettyResult = [NSString stringWithFormat:@"\"%@\"", result];
    }
    NSLog(@"Result Type: %@", NSStringFromClass([result class]));
    
    return prettyResult;
}

- (NSString *)makeJsonable:(NSString *)input {
    NSArray *resultComponents = [input componentsSeparatedByCharactersInSet:[NSCharacterSet newlineCharacterSet]];
    return [resultComponents componentsJoinedByString:@""];
}

@end
