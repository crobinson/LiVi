//
//  SignInViewController.m
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.6
//
//
#import <Foundation/Foundation.h>
#import "MainViewController.h"
#import "SignInViewController.h"
#import <AWSCore/AWSCore.h>
#import "AWSIdentityManager.h"

static NSString *LOG_TAG;

@interface SignInViewController ()

@property (nonatomic, strong) id didSignInObserver;

@end

@implementation SignInViewController

+ (void)initialize {
    [super initialize];
    LOG_TAG = NSStringFromClass(self);
}

#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"%@: Sign-In Loading.", LOG_TAG);
    [self.myscroll setScrollEnabled:YES];
    [self.myscroll setContentSize:CGSizeMake(self.view.bounds.size.width, self.view.bounds.size.height)];
    self.facebookButton.layer.cornerRadius = 10;
    self.customProviderButton.layer.cornerRadius = 10;
    self.customCreateAccountButton.layer.cornerRadius = 10;
    self.siginBtn.layer.cornerRadius = 10;
    self.ressetPwdBtnBtn.layer.cornerRadius = 10;
    self.userPwdBtnBtn.layer.cornerRadius = 10;
    self.vendorPwdBtnBtn.layer.cornerRadius = 10;
    self.selectButton.layer.cornerRadius = 10;

    __weak SignInViewController *weakSelf = self;
    self.didSignInObserver =
        [[NSNotificationCenter defaultCenter]
            addObserverForName:AWSIdentityManagerDidSignInNotification
                        object:[AWSIdentityManager sharedInstance]
                         queue:[NSOperationQueue mainQueue]
                    usingBlock:^(NSNotification * _Nonnull note) {
                                  [weakSelf.presentingViewController
                                      dismissViewControllerAnimated:YES
                                                         completion:nil];
                               }];
    // FACEBOOK UI SETUP
    [self.facebookButton addTarget:self
                            action:@selector(handleFacebookLogin)
                  forControlEvents:UIControlEventTouchUpInside];
    /*UIImage *facebookButtonImage = [UIImage imageNamed:@"FacebookButton"];
    if (facebookButtonImage) {
        [self.facebookButton setImage:facebookButtonImage
                             forState:UIControlStateNormal];
    } else {
        NSLog(@"%@: Facebook button image unavailable. We're hiding this button.", LOG_TAG);
        self.facebookButton.hidden = YES;
    }*/

    /*[self.view addConstraint:[NSLayoutConstraint
                                 constraintWithItem:self.facebookButton
                                          attribute:NSLayoutAttributeTop
                                          relatedBy:NSLayoutRelationEqual
                                             toItem:[self anchorViewForFacebook]
                                          attribute:NSLayoutAttributeBottom
                                         multiplier:1
                                          constant:8.0]];*/
    [self.googleButton removeFromSuperview];
    // CUSTOM UI SETUP
    [self.customProviderButton addTarget:self
                                  action:@selector(handleCustomLogin)
                        forControlEvents:UIControlEventTouchUpInside];
    [self.customCreateAccountButton addTarget:self
                                       action:@selector(handleCustomLogin)
                             forControlEvents:UIControlEventTouchUpInside];
    [self.customForgotPasswordButton addTarget:self
                                        action:@selector(handleCustomLogin)
                              forControlEvents:UIControlEventTouchUpInside];

}

-(IBAction)back:(id)sender {
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self.didSignInObserver];
}

#pragma mark - Utility Methods

- (void)handleLoginWithSignInProvider:(AWSSignInProviderType)signInProviderType {
    [[AWSIdentityManager sharedInstance]
        loginWithSignInProvider:signInProviderType
              completionHandler:^(id result, NSError *error) {
                                    if (!error) {
                                        dispatch_async(dispatch_get_main_queue(), ^{
                                            [self.parentViewController dismissViewControllerAnimated:YES
                                                                                          completion:nil];
                                        });
                                    }
                                    NSLog(@"result = %@, error = %@", result, error);
                                }];
}

- (void)showErrorDialog:(NSString *)loginProviderName withError:(const NSError *)error {
    NSLog(@"%@: %@ failed to sign in w/ error: %@", LOG_TAG, loginProviderName, error);

    UIAlertController *alertController =
        [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Sign-in Provider Sign-In Error",
                                                                      @"Sign-in error for sign-in failure.")
                                            message:NSLocalizedString(@"%@ failed to sign in w/ error: %@",
                                                                      @"Sign-in message structure for sign-in failure.")
                                     preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction =
        [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",
                                                         @"Label to cancel sign-in failure.")
                                 style:UIAlertActionStyleCancel
                                handler:nil];
    [alertController addAction:doneAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

#pragma mark - IBActions

- (void)handleFacebookLogin {
    [self handleLoginWithSignInProvider:AWSSignInProviderTypeFacebook];
}
- (void)handleCustomLogin {
    /*UIAlertController *alertController =
        [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Custom Sign-In Demo",
                                                                      @"Label for custom sign-in dialog.")
                                            message:NSLocalizedString(@"This is just a demo of custom sign-in.",
                                                                      @"Sign-in message structure for custom sign-in stub.")
                                     preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction =
        [UIAlertAction actionWithTitle:NSLocalizedString(@"Done",
                                                         @"Label to complete stubbed custom sign-in.")
                                 style:UIAlertActionStyleCancel
                               handler:nil];
    [alertController addAction:doneAction];
    
    [self presentViewController:alertController
                       animated:YES
                     completion:nil];*/
}

- (UIView *)anchorViewForFacebook {
    return self.orSignInWithLabel;
}

#pragma mark UITextField

- (void)textFieldDidBeginEditing:(UITextField *)textField
{
    mytextField = textField;
    [self.myscroll setContentSize:CGSizeMake(self.view.bounds.size.width, self.view.bounds.size.height+153)];
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:0.50];
    [UIView setAnimationDelegate:self];
    
    [self.myscroll setContentOffset:CGPointMake(0, textField.frame.origin.y - 150) animated:YES];
    
    [UIView commitAnimations];
    
}


- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    /* if (textField == _Username_TextField) {
     [_Username_TextField resignFirstResponder];
     [_password_TextField becomeFirstResponder];
     } else if (textField == _password_TextField) {*/
    // here you can define what happens
    // when user presses return on the email field
    [textField resignFirstResponder];
    [self.myscroll setContentSize:CGSizeMake(self.view.bounds.size.width, self.view.bounds.size.height-153)];
    [UIView beginAnimations:nil context:nil];
    [UIView setAnimationDuration:0.50];
    [UIView setAnimationDelegate:self];
    
    [self.myscroll setContentOffset:CGPointMake(0, 0) animated:YES];
    
    [UIView commitAnimations];
    
    
    // }
    return YES;
}

- (void)textFieldDidEndEditing:(UITextField *)textField
{
    
    
}

#pragma mark NIDropDown

- (IBAction)selectClicked:(id)sender {
    NSArray * arr = [[NSArray alloc] init];
    arr = [NSArray arrayWithObjects:@"Hello 0", @"Hello 1", @"Hello 2", @"Hello 3", @"Hello 4", @"Hello 5", @"Hello 6", @"Hello 7", @"Hello 8", @"Hello 9",nil];
    NSArray * arrImage = [[NSArray alloc] init];
    arrImage = [NSArray arrayWithObjects:[UIImage imageNamed:@"apple.png"], [UIImage imageNamed:@"apple2.png"], [UIImage imageNamed:@"apple.png"], [UIImage imageNamed:@"apple2.png"], [UIImage imageNamed:@"apple.png"], [UIImage imageNamed:@"apple2.png"], [UIImage imageNamed:@"apple.png"], [UIImage imageNamed:@"apple2.png"], [UIImage imageNamed:@"apple.png"], [UIImage imageNamed:@"apple2.png"], nil];
    if(dropDown == nil) {
        CGFloat f = 200;
        dropDown = [[NIDropDown alloc]showDropDown:sender :&f :arr :arrImage :@"down"];
        dropDown.delegate = self;
    }
    else {
        [dropDown hideDropDown:sender];
        [self rel];
    }
}

- (void) niDropDownDelegateMethod: (NIDropDown *) sender
{
    [self rel];
}

- (void) whoissender: (UIButton *) sender andtext:(NSString *)titulo
{
    /*[self.view addGestureRecognizer:tap];
    
    if(sender == _pais_Button){
        [[NSUserDefaults standardUserDefaults] setObject:titulo forKey:@"pais_Button"];
        _pais.placeholder = @"";
        paisSelected = titulo;
        
    }else{
        _tipoddocumento.placeholder = @"";
        tipoSelected = titulo;
    }*/
    
    //[self rel];
}

-(void)rel{
    //    [dropDown release];
    dropDown = nil;
}

@end
